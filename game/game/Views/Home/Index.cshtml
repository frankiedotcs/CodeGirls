@{
    ViewBag.Title = "Game of Life";
}
<h2>Game of Life</h2>

<div class="container">
    <canvas id="myCanvas" width="160" height="160" style="border:1px solid #d3d3d3;"></canvas>

    <button id="start"> Start </button>
    <button id="next"> Next</button>
    <button id="stop"> Stop </button>
    <button id="restart"> Restart </button>

</div>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <script>
        //Stores canvas
        var elem = document.getElementById('myCanvas');
        elemLeft = elem.offsetLeft;
        elemTop = elem.offsetTop;
        context = elem.getContext('2d');

        var binArr = [];
        var shapeArr = [];

        //Initialize hub
        var hub = $.connection.chatHub;
        // Hub calls back to each client to check if they have this function
        hub.client.updateArrayOnPage = function (array) {
            binArr = array
            createShapeArray();
            draw();
        };

        // Start the connection.
        // Set event listeners that call specified hub functions
        $.connection.hub.start() .done(function () {
            $('#next').click(function () {
                hub.server.next();
            });

            $('#start').click(function () {
                hub.server.start();
            });

            $('#restart').click(function () {
                hub.server.restart();
            });

            $('#stop').click(function () {
                hub.server.stop();
            });

            //Add Hit test event listener
            elem.addEventListener('click', function (event) {
                var x = event.pageX - elemLeft,
                    y = event.pageY - elemTop;
                console.log(x, y);

                //run through array and check if mouse click matched an elements location
                for (var row = 1; row < 11; row++) {
                    for (var col = 1; col < 11; col++) {
                        var element = shapeArr[row][col];
                        if (y > element.y && y < element.y + element.h && x > element.x && x < element.x + element.w) {
                            hub.server.change(element.r, element.c);

                        }
                    }
                }

            }, false);
        });
        


    // Basic Shape Contructor to store Shapes position and properties
    function Shape(x, y, r, c, alive) {
        this.x = x;
        this.y = y;
        this.w = 15;
        this.h = 15;
        this.r = r;
        this.c = c;
        this.alive = alive;
        if (alive == 0)
            this.fill = "grey";
        if (alive == 1)
            this.fill = "green";
    }
    

    function createShapeArray() {
        //creates 2D array
        for (var i = 0; i < 12; i++) { 
              shapeArr[i] = new Array(12);
        }

        //Initialize Array
        var xPos = 0;
        var yPos = 0;
        var count = 0;
        for (var r = 0; r < 12; r++) {
            for (var c = 0; c < 12; c++) {
                shapeArr[r][c] = new Shape(xPos, yPos, r, c, binArr[count]);
                count++;
                if (c == 0 || c == 11)  //skip if edge
                    continue;
                xPos += 16;
            }
            xPos = 0;

            if (r == 0 || r == 11)  //skip if edge
                continue;
            yPos += 16;
        }  
       
    }//end createArray



    //Draws Canvas and all the elements in the array
    function draw() {
        context = elem.getContext('2d');
        for (var i = 1; i < 11; i++) {
            for (var j = 1; j < 11; j++) {
                oRec = shapeArr[i][j];
                context.fillStyle = oRec.fill;
                context.fillRect(oRec.x, oRec.y, oRec.w, oRec.h);
            }
        }
    }


    //Starts and stops animation on button press
    var interval;
    function start() {
        interval = setInterval(update, 700);
    }
    function stop() {
        clearInterval(interval);
    }
    


</script>

}
